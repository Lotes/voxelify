class Vertex {
  position: THREE.Vector3
  uv: THREE.Vector2
}

class TriangleRasterizer {
  Observable<WeightedColor> getPixels(Triangle)
}

class Face {
  a: Vertex
  b: Vertex
  c: Vertex
  material: Material
}

class FaceExtensions {
  Observable<Face> split(Plane)
  WeightedColor getColor()
}

class UnitSieve {
  constructor(bbox: THREE.Box3)
  Observable<Tuple<THREE.Vector3, Face>> sieve(face: Face)
}

class MeshExtensions {
  Observable<Face> getFaces()
  THREE.Box3 getBoundingBox()
}

class MaterialExtensions {
  ImageData getImageData()
}

class Color {
  r(), g(), b(): int
}

class WeightedColor {
  weight: int
  r, g, b: int
  weight(): int
  add(WeightedColor)
}

Face <.. MeshExtensions : "produces"
Face o-- Vertex
FaceExtensions --|> Face
Face <.. UnitSieve : "consumes/produces"
Face ..> WeightedColor : "produces"
FaceExtensions ..> TriangleRasterizer : "uses"
WeightedColor --|> Color

class VoxelGrid {
  get(x: int, y: int, z: int): WeightedColor
}

VoxelGrid o-- WeightedColor
